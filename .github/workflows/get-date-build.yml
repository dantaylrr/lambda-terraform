on:
  workflow_dispatch:
    paths:
      - "./lambda/get-date/*"

env:
  WORKING_DIR: "get-date"
  LAMBDA_FUNCTION_NAME: "get-date"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip3 install pytest

      - name: run tests
        run: |
          cd lambda/${{ env.WORKING_DIR }}/
          python -m pytest -v tests/unit --junitxml=junit/tests/lambda/test-results.xml
      
      - name: publish test results
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: test-results
          path: lambda/${{ env.WORKING_DIR }}/junit/tests/lambda/test-results.xml

  build-package:
    needs: run-tests
    runs-on: ubuntu-latest
    environment: package-release
    steps:
      - uses: actions/checkout@v2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          aws-region: eu-west-2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: set-up workspace
        run: |
          make construct-directories working_dir=${{ env.WORKING_DIR }}
      - name: build-package
        run: |
          make build-package working_dir=${{ env.WORKING_DIR }}
      - name: generate-new-hash
        run: |
          make generate-source-hash working_dir=${{ env.WORKING_DIR }}
      #    echo "NEW_HASH=$(openssl dgst -sha256 -binary ./tmp/package/deployment-package.zip)" >> $GITHUB_ENV

      #- name: download-current-hash
      #  run: |
      #    cd lambda/${{ env.WORKING_DIR }}
      #    aws s3 cp s3://${{ vars.S3_LAMBDA_TEMPLATE_BUCKET }}/${{ env.WORKING_DIR }}/deployment-package/ ./tmp/current_hash/ --recursive
      #    echo "CUR_HASH=$(openssl dgst -sha256 -binary ./tmp/current_hash/*.zip)" >> $GITHUB_ENV

      - name: release-deployment-package-to-s3
      #  if: ${{ env.CUR_HASH }} != ${{ env.NEW_HASH }}
        run: |
          make release-deployment-package-to-s3 working_dir=${{ env.WORKING_DIR }} lambda_template_bucket=${{ vars.S3_LAMBDA_TEMPLATE_BUCKET }}
      - name: release-source-hash-to-s3
      #  if: ${{ env.CUR_HASH }} != ${{ env.NEW_HASH }}
        run: |
          make release-source-hash-to-s3 working_dir=${{ env.WORKING_DIR }} lambda_template_bucket=${{ vars.S3_LAMBDA_TEMPLATE_BUCKET }}
      #- name: update-lambda-function
      #  run: |
      #    aws lambda update-function-code --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --s3-bucket ${{ vars.S3_LAMBDA_TEMPLATE_BUCKET }} --s3-key ${{ env.WORKING_DIR }}/deployment-package/deployment-package.zip
      - name: clean-up
        run: |
          make clean-up working_dir=${{ env.WORKING_DIR }}